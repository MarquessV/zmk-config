/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Homerow mods */
#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/ {

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |---|  Y  |  U  |  I  |  O  |  P  | BKSP |
            // |  ESC |  A  |  S  |  D  |  F  |  G  |---|  H  |  J  |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |---|  N  |  M  |  ,  |  .  |  /  | ESC  |
            //                    | MEH | LWR | SPC |---| RET | NUM | HPR |

            bindings = <
&kp TAB    &kp Q       &kp W       &kp E             &kp R        &kp T        &kp Y      &kp U        &kp I                 &kp O       &kp P          &kp BSPC
&kp ESC    &mt LGUI A  &mt LALT S  &mt LCTRL D       &mt LSHFT F  &kp G        &kp H      &mt RSHFT J  &mt RCTRL K           &mt RALT L  &mt RGUI SEMI  &kp SQT
&kp LSHFT  &kp Z       &kp X       &kp C             &kp V        &kp B        &kp N      &kp M        &kp COMMA             &kp DOT     &kp FSLH       &kp RSHFT
                                   &kp LG(LS(LALT))  &mo 1        &kp SPACE    &lt 3 RET  &mo 2        &kp RS(RA(RC(RGUI)))
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |      |     |     |     |     |     |---|  PP | PRE | NXT |     |     |      |
            // |      | GUI | ALT | CTL | SHF |     |---| LFT | DWN |  UP | RGT |     |      |
            // | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |---|     |     |     |     |     |      |
            //                    |     |     |     |---|     |     |     |

            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_PP  &kp C_PREV  &kp C_NEXT  &trans     &trans  &trans
&trans      &kp RGUI      &kp RALT      &kp LCTRL     &kp RSHFT     &trans          &kp LEFT  &kp DOWN    &kp UP      &kp RIGHT  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans    &trans      &trans      &trans     &trans  &trans
                                        &trans        &trans        &trans          &kp RET   &trans      &kp RALT
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |      |  [  |  7  |  8  |  9  |  ]  |---|     |     |     |     |     |      |
            // |      |  (  |  4  |  5  |  6  |  )  |---|     | SHF | CTL | ALT | GUI |      |
            // |      |  `  |  1  |  2  |  3  |  \  |---|     |     |     |     |     |      |
            //                    |  .  |  0  |  -  |---|     |     |     |

            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8      &kp N9  &kp RBKT     &trans   &trans      &trans     &trans    &trans    &trans
&trans  &kp LPAR   &kp N4  &kp N5      &kp N6  &kp RPAR     &trans   &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp EQUAL  &kp N1  &kp N2      &kp N3  &kp BSLH     &trans   &trans      &trans     &trans    &trans    &trans
                           &kp PERIOD  &kp N0  &kp MINUS    &kp RET  &trans      &kp RALT
            >;
        };

        sym {
            bindings = <
&trans  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RPAR)     &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp LS(COLON)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(PLUS)     &trans  &kp RSHFT  &kp LCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)     &trans  &trans     &trans     &trans    &trans    &trans
                                     &kp LS(LPAR)   &kp LS(RPAR)   &kp LS(UNDER)    &trans  &trans     &trans
            >;
        };
    };
};

/* vim: set ft=c tw=174: */
