/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

/* Homerow mods */
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

/ {

    behaviors {

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |---|  Y  |  U  |  I  |  O  |  P  | BKSP |
            // |  ESC |  A  |  S  |  D  |  F  |  G  |---|  H  |  J  |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |---|  N  |  M  |  ,  |  .  |  /  | ESC  |
            //                    | MEH | LWR | SPC |---| RET | NUM | HPR |

            bindings = <
&kp TAB    &kp Q       &kp W       &kp E             &kp R        &kp T        &kp Y      &kp U        &kp I                 &kp O       &kp P          &kp BSPC
&kp ESC    &hm_l LGUI A  &hm_l LALT S  &hm_l LCTRL D       &hm_shift_l LSHFT F  &kp G        &kp H      &hm_shift_r RSHFT J  &hm_r RCTRL K           &hm_r RALT L  &hm_r RGUI SEMI  &kp SQT
&kp LSHFT  &kp Z       &kp X       &kp C             &kp V        &kp B        &kp N      &kp M        &kp COMMA             &kp DOT     &kp FSLH       &kp RSHFT
                                   &kp LG(LS(LALT))  &mo 1        &kp SPACE    &lt 3 RET  &mo 2        &kp RS(RA(RC(RGUI)))
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |      |     |     |     |     |     |---|  PP | PRE | NXT |     |     |      |
            // |      | GUI | ALT | CTL | SHF |     |---| LFT | DWN |  UP | RGT |     |      |
            // | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |---|     |     |     |     |     |      |
            //                    |     |     |     |---|     |     |     |

            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_PP  &kp C_PREV  &kp C_NEXT  &trans     &trans  &trans
&trans      &kp RGUI      &kp RALT      &kp LCTRL     &kp RSHFT     &trans          &kp LEFT  &kp DOWN    &kp UP      &kp RIGHT  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans    &trans      &trans      &trans     &trans  &trans
                                        &trans        &trans        &trans          &kp RET   &trans      &kp RALT
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |      |  [  |  7  |  8  |  9  |  ]  |---|     |     |     |     |     |      |
            // |      |  ;  |  4  |  5  |  6  |  =  |---|     | SHF | CTL | ALT | GUI |      |
            // |      |  `  |  1  |  2  |  3  |  \  |---|     |     |     |     |     |      |
            //                    |  .  |  0  |  -  |---|     |     |     |

            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8      &kp N9  &kp RBKT     &trans   &trans      &trans     &trans    &trans    &trans
&trans  &kp SEMI   &kp N4  &kp N5      &kp N6  &kp EQUAL    &trans   &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE  &kp N1  &kp N2      &kp N3  &kp BSLH     &trans   &trans      &trans     &trans    &trans    &trans
                           &kp PERIOD  &kp N0  &kp MINUS    &kp RET  &trans      &trans
            >;
        };

        sym {
            // -----------------------------------------------------------------------------------------
            // |      |  {  |  &  |  *  |  (  |  }  |---|     |     |     |     |     |      |
            // |      |  :  |  $  |  %  |  ^  |  +  |---|     | SHF | CTL | ALT | GUI |      |
            // |      |  ~  |  !  |  @  |  #  |  |  |---|     |     |     |     |     |      |
            //                    |  (  |  )  |  _  |---|     |     |     |
            bindings = <
&trans  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)     &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp LS(COLON)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(PLUS)     &trans  &kp RSHFT  &kp LCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)     &trans  &trans     &trans     &trans    &trans    &trans
                                     &kp LS(LPAR)   &kp LS(RPAR)   &kp LS(UNDER)    &trans  &trans     &trans
            >;
        };
    };
};
